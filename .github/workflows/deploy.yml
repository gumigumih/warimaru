name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main # メインブランチへのプッシュ時に実行

permissions:
  contents: write # GitHub Pagesへのデプロイに必要な権限

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得

      - name: Get current version from package.json
        id: current-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get latest release tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Check if version was updated
        id: version-check
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          LATEST_TAG="${{ steps.current-version.outputs.latest_tag }}"

          # タグからvプレフィックスを除去
          LATEST_VERSION=${LATEST_TAG#v}

          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "❌ Version not updated! Current: $CURRENT_VERSION, Latest tag: $LATEST_VERSION"
            echo "Please update the version in package.json before deploying"
            exit 1
          else
            echo "✅ Version updated! Current: $CURRENT_VERSION, Latest tag: $LATEST_VERSION"
            echo "should_create_tag=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate semantic versioning
        run: |
          VERSION="${{ steps.current-version.outputs.current_version }}"

          # セマンティックバージョニングの形式チェック (x.y.z)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (x.y.z)"
            exit 1
          fi

          echo "✅ Version format is valid: $VERSION"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: version-check # バージョンチェックが成功した後にのみ実行
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist # Viteのビルド出力ディレクトリ
          branch: gh-pages # デプロイ先のブランチ
          clean: true # デプロイ前に古いファイルを削除

      - name: Create CNAME file
        run: echo "warimaru.meggumi.com" > dist/CNAME

      - name: Deploy CNAME
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: false

  create-tag-and-release:
    runs-on: ubuntu-latest
    needs: [version-check, build-and-deploy] # バージョンチェックとビルドが成功した後に実行
    if: needs.version-check.outputs.should_create_tag == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得
          token: ${{ secrets.GITHUB_TOKEN }} # タグ作成に必要な権限

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: v$VERSION"

      - name: Create and push tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG="v$VERSION"

          # タグが既に存在するかチェック
          if git tag -l "$TAG" | grep -q "$TAG"; then
            echo "Tag $TAG already exists, skipping tag creation"
          else
            echo "Creating tag $TAG"
            git tag "$TAG"
            git push origin "$TAG"
            echo "Tag $TAG created and pushed successfully"
          fi

      - name: Generate release notes
        id: generate_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG="v$VERSION"

          # 前回のタグを取得
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Previous tag: $PREVIOUS_TAG"
            # 前回タグからの変更を取得
            CHANGES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$TAG)
          else
            echo "First release"
            # 初回リリースの場合は全履歴を取得
            CHANGES=$(git log --pretty=format:"- %s")
          fi

          # リリースノートテンプレートを生成
          echo "# わりまる v$VERSION リリース" > release_notes.md
          echo "" >> release_notes.md
          echo "## 🎯 概要" >> release_notes.md
          echo "このリリースでは、以下の改善と新機能が追加されました。Webブラウザからすぐにご利用いただけます。" >> release_notes.md
          echo "" >> release_notes.md
          echo "## ✨ 新機能" >> release_notes.md
          echo "- " >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🚀 改善" >> release_notes.md
          echo "- " >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🐛 バグ修正" >> release_notes.md
          echo "- " >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📝 参考：コミット履歴" >> release_notes.md
          echo "以下のコミットが含まれています（手動で編集してください）：" >> release_notes.md
          echo "" >> release_notes.md
          echo "$CHANGES" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🌐 アクセス" >> release_notes.md
          echo "[わりまる v$VERSION](https://warimaru.meggumi.com)" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📋 フィードバック" >> release_notes.md
          echo "[GitHub Issues](https://github.com/gumigumih/warimaru/issues) でフィードバックをお待ちしています。" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "**📝 手動編集後に公開してください**" >> release_notes.md

          echo "Release notes generated"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          release_name: わりまる v${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false # リリースを即座に公開
          prerelease: false

      - name: Success message
        run: |
          echo "🎉 GitHubリリース v${{ steps.get_version.outputs.version }} が正常に作成されました！"
          echo "📖 公開リリース: https://github.com/gumigumih/warimaru/releases/tag/${{ steps.get_version.outputs.tag }}"
          echo ""
          echo "✅ リリースは自動的に公開されました"
          echo "💡 ヒント: 必要に応じてリリースノートを後から編集できます"
